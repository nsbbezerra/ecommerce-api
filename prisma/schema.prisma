// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TypeActive {
  monthly
  yearly
  definitive
}

model Company {
  id                     String      @id @default(uuid())
  name                   String
  cnpj                   String      @unique @db.VarChar(20)
  fantasy_name           String
  municipal_registration String?
  state_registration     String?
  phone                  String      @db.VarChar(18)
  email                  String?
  street                 String
  number                 String
  comp                   String?
  district               String
  zip_code               String      @db.VarChar(11)
  city                   String
  state                  String      @db.VarChar(2)
  expires_code_date      DateTime?
  company_code           String?     @unique
  type_activation        TypeActive?
  thumbnail              String?
  thumbnail_id           String?
  active                 Boolean     @default(true)
  created_at             DateTime    @default(now())

  Employee                Employee[]
  Product                 Product[]
  Order                   Order[]
  Config                  Config[]
  Revenue                 Revenue[]
  Expense                 Expense[]
  Coupon                  Coupon[]
  Promotion               Promotion[]
  Category                Category[]
  SubCat                  SubCat[]
  PartitionSale           PartitionSale[]
  PartitionSaleCategory   PartitionSaleCategory[]
  AddictionalItemCategory AddictionalItemCategory[]
  PayForms                PayForms[]
  Comissions              Comissions[]
  Client                  Client[]
  Cashier                 Cashier[]
  Payments                Payments[]

  @@map("companies")
}

enum Permission {
  all
  cashier
  seller
}

model Employee {
  id         String       @id @default(uuid())
  company_id String
  company    Company      @relation(fields: [company_id], references: [id])
  name       String
  phone      String?
  user       String       @unique
  password   String
  permission Permission
  active     Boolean      @default(true)
  created_at DateTime     @default(now())
  Comissions Comissions[]
  Cashier    Cashier[]
  Order      Order[]

  @@map("employees")
}

model Comissions {
  id          String   @id @default(uuid())
  company_id  String
  company     Company  @relation(fields: [company_id], references: [id])
  employee_id String
  employee    Employee @relation(fields: [employee_id], references: [id])
  order_id    String
  order       Order    @relation(fields: [order_id], references: [id])
  value       Decimal  @db.Decimal(10, 2)
  month       String
  year        String
  created_at  DateTime @default(now())

  @@map("comissions")
}

model Client {
  id         String   @id @default(uuid())
  company_id String
  company    Company  @relation(fields: [company_id], references: [id])
  name       String
  cpf        String   @unique @db.VarChar(15)
  phone      String
  email      String?  @unique
  street     String
  number     String
  comp       String?
  district   String
  zip_code   String   @db.VarChar(11)
  city       String
  state      String   @db.VarChar(2)
  password   String?
  created_at DateTime @default(now())

  Order Order[]

  @@map("clients")
}

enum Calc {
  marge
  markup
}

enum Unity {
  square_meter
  meter
  unity
  weight
  liter
  without
  sizes
}

enum TypeSale {
  unique
  partition
}

model Product {
  id                     String                   @id @default(uuid())
  company_id             String
  company                Company                  @relation(fields: [company_id], references: [id])
  category_id            String
  category               Category                 @relation(fields: [category_id], references: [id])
  sub_category_id        String
  sub_category           SubCat                   @relation(fields: [sub_category_id], references: [id])
  title                  String
  description            String?
  sku                    String                   @unique
  barcode                String
  internal_code          String                   @unique
  calc_price             Calc
  cost_value             Json
  profit_percent         Decimal                  @db.Decimal(10, 2)
  markup_factor          Decimal                  @db.Decimal(10, 2)
  sale_value             Decimal                  @db.Decimal(10, 2)
  type_sale              TypeSale?
  sale_options           String?
  sale_options_category  String?
  sale_options_partition PartitionSaleCategory?   @relation(fields: [sale_options_category], references: [id])
  active                 Boolean                  @default(true)
  in_promotion           Boolean                  @default(false)
  thumbnail              String?
  thumbnail_id           String?
  type_unit              Unity
  unit_desc              String?
  inventory              Decimal?                 @db.Decimal(10, 2)
  width                  Json?
  shipping               Json?
  unity                  String?
  details                String?
  promotions             String?
  tags                   String[]
  have_adictional        Boolean                  @default(false)
  adictional_items_id    String?
  addictional_items      AddictionalItemCategory? @relation(fields: [adictional_items_id], references: [id])
  created_at             DateTime                 @default(now())

  Image       Image[]
  Assets      Assets[]
  Taxes       Taxes[]
  Sizes       Sizes[]
  OrdertItems OrdertItems[]

  @@map("products")
}

model Sizes {
  id          String   @id @default(uuid())
  product_id  String
  product     Product  @relation(fields: [product_id], references: [id])
  description String
  inventory   Int
  created_at  DateTime @default(now())

  @@map("sizes")
}

model Taxes {
  id                     String   @id @default(uuid())
  product_id             String
  product                Product  @relation(fields: [product_id], references: [id])
  cfop                   String?
  ncm                    String?
  icms_rate              String?
  icms_origin            String?
  icms_csosn             String?
  icms_st_rate           String?
  icms_marg_val_agregate String?
  icms_st_mod_bc         String?
  icms_base_calc         String?
  imcs_st_base_calc      String?
  fcp_rate               String?
  fcp_st_rate            String?
  fcp_ret_rate           String?
  fcp_base_calc          String?
  fcp_st_base_calc       String?
  ipi_cst                String?
  ipi_rate               String?
  ipi_code               String?
  pis_cst                String?
  pis_rate               String?
  pis_base_calc          String?
  cofins_cst             String?
  cofins_rate            String?
  cofins_base_calc       String?
  cest                   String?
  isTributed             Boolean
  created_at             DateTime @default(now())

  @@map("taxes")
}

model Image {
  id         String   @id @default(uuid())
  product_id String
  product    Product  @relation(fields: [product_id], references: [id])
  image      String
  image_id   String
  created_at DateTime @default(now())

  @@map("images")
}

model Assets {
  id         String   @id @default(uuid())
  product_id String
  product    Product  @relation(fields: [product_id], references: [id])
  file       String
  file_id    String
  created_at DateTime @default(now())

  @@map("assets")
}

model Xml {
  id         String   @id @default(uuid())
  nfe_key    String
  created_at DateTime @default(now())

  @@map("xmls")
}

enum Payment {
  wait
  paid_out
  refused
  cancel
}

enum OrderStatus {
  awaiting_payment
  in_separation
  cancel
  order_dispatched
  finish
}

enum OrderOrigin {
  ecommerce
  pdv
}

enum PaymentMethod {
  money
  check
  credit_card
  debit_card
  ticket
  duplicata
  pix
  checkout
}

model Order {
  id                   String         @id @default(uuid())
  company_id           String
  company              Company        @relation(fields: [company_id], references: [id])
  client_id            String
  client               Client         @relation(fields: [client_id], references: [id])
  employee_id          String
  employee             Employee       @relation(fields: [employee_id], references: [id])
  total_order          Decimal        @db.Decimal(10, 2)
  discount             Decimal        @db.Decimal(10, 2)
  total_to_pay         Decimal        @db.Decimal(10, 2)
  payment_id           String?
  payment_method       PaymentMethod?
  payment_status       Payment
  order_status         OrderStatus
  origin               OrderOrigin
  shipping_code        String?
  shipping_information String?
  month                String
  year                 String
  created_at           DateTime       @default(now())
  Comissions           Comissions[]
  OrdertItems          OrdertItems[]
  Payments             Payments[]

  @@map("orders")
}

model OrdertItems {
  id             String   @id @default(uuid())
  order_id       String
  order          Order    @relation(fields: [order_id], references: [id])
  product_id     String
  product        Product  @relation(fields: [product_id], references: [id])
  quantity       Decimal  @db.Decimal(10, 2)
  in_promotion   Boolean
  profit_percent Decimal  @db.Decimal(10, 2)
  type           Unity
  sale_value     Decimal  @db.Decimal(10, 2)
  sale_total     Decimal  @db.Decimal(10, 2)
  partition      Json?
  adictional     Json?
  widths         Decimal? @db.Decimal(10, 2)
  height         Decimal? @db.Decimal(10, 2)
  size           Json?
  created_at     DateTime @default(now())

  @@map("order_items")
}

model Payments {
  id          String   @id @default(uuid())
  company_id  String
  company     Company  @relation(fields: [company_id], references: [id])
  order_id    String
  order       Order    @relation(fields: [order_id], references: [id])
  pay_form_id String
  pay_form    PayForms @relation(fields: [pay_form_id], references: [id])
  title       String
  status      Payment
  checkout_id String?
  created_at  DateTime @default(now())

  @@map("payments")
}

model Config {
  id                           String   @id @default(uuid())
  company_id                   String
  company                      Company  @relation(fields: [company_id], references: [id])
  max_tickets_installments     Int
  max_card_installments        Int
  min_value_ticket_installment Int
  min_value_card_installment   Int
  invoices                     Boolean?
  tickets                      Boolean?
  cards                        Boolean?
  pix                          Boolean?
  digital_payment              Boolean?
  crypto                       Boolean?
  payment_sdk_key              String?
  created_at                   DateTime @default(now())

  @@map("configs")
}

model Revenue {
  id             String        @id @default(uuid())
  company_id     String
  company        Company       @relation(fields: [company_id], references: [id])
  title          String
  description    String
  value          Decimal       @db.Decimal(10, 2)
  due_date       DateTime
  payment_method PaymentMethod
  payment_status Payment
  month          String
  year           String
  created_at     DateTime      @default(now())

  @@map("revenues")
}

model Expense {
  id             String        @id @default(uuid())
  company_id     String
  company        Company       @relation(fields: [company_id], references: [id])
  title          String
  description    String
  value          Decimal       @db.Decimal(10, 2)
  due_date       DateTime
  payment_method PaymentMethod
  payment_status Payment
  month          String
  year           String
  created_at     DateTime      @default(now())

  @@map("expenses")
}

enum PeriodCoupon {
  infinite
  due_date
  quantity
}

model Coupon {
  id           String       @id @default(uuid())
  company_id   String
  company      Company      @relation(fields: [company_id], references: [id])
  coupon       String
  dicount      Decimal      @db.Decimal(10, 2)
  period       PeriodCoupon
  number_used  Int?
  expires_date DateTime?
  active       Boolean      @default(true)
  created_at   DateTime     @default(now())

  @@map("coupons")
}

model Promotion {
  id          String   @id @default(uuid())
  company_id  String
  company     Company  @relation(fields: [company_id], references: [id])
  banner      String?
  banner_id   String?
  title       String   @unique
  description String?
  discount    Decimal  @db.Decimal(10, 2)
  active      Boolean  @default(true)
  created_at  DateTime @default(now())

  @@map("promotions")
}

model Category {
  id          String   @id @default(uuid())
  company_id  String
  company     Company  @relation(fields: [company_id], references: [id])
  title       String
  description String?
  active      Boolean  @default(true)
  icon        String
  created_at  DateTime @default(now())

  Product Product[]
  SubCat  SubCat[]

  @@map("categories")
}

model SubCat {
  id          String   @id @default(uuid())
  company_id  String
  company     Company  @relation(fields: [company_id], references: [id])
  category_id String
  category    Category @relation(fields: [category_id], references: [id])
  title       String
  description String?
  icon        String
  active      Boolean  @default(true)
  created_at  DateTime @default(now())

  Product Product[]

  @@map("sub_categories")
}

model AddictionalItemCategory {
  id         String   @id @default(uuid())
  title      String
  company_id String
  company    Company  @relation(fields: [company_id], references: [id])
  created_at DateTime @default(now())

  AddictionalItem AddictionalItem[]
  Product         Product[]

  @@map("addictional_items_category")
}

model AddictionalItem {
  id                           String                  @id @default(uuid())
  addictional_item_category_id String
  addictional_item_category    AddictionalItemCategory @relation(fields: [addictional_item_category_id], references: [id])
  name                         String
  value                        Decimal                 @db.Decimal(10, 2)
  active                       Boolean                 @default(true)
  created_at                   DateTime                @default(now())

  @@map("addictional_items")
}

model PartitionSaleCategory {
  id         String   @id @default(uuid())
  company_id String
  company    Company  @relation(fields: [company_id], references: [id])
  name       String
  created_at DateTime @default(now())

  PartitionSale PartitionSale[]
  Product       Product[]

  @@map("partition_sale_category")
}

model PartitionSale {
  id                         String                @id @default(uuid())
  partition_sale_category_id String
  partition_sale_category    PartitionSaleCategory @relation(fields: [partition_sale_category_id], references: [id])
  name                       String
  value                      Decimal               @db.Decimal(10, 2)
  active                     Boolean               @default(true)
  created_at                 DateTime              @default(now())

  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  @@map("partition_sale")
}

model PayForms {
  id              String        @id @default(uuid())
  company_id      String
  company         Company       @relation(fields: [company_id], references: [id])
  name            String
  tag             PaymentMethod
  is_installments Boolean
  installments    Int
  interval_days   String
  active          Boolean       @default(true)
  created_at      DateTime      @default(now())
  Payments        Payments[]

  @@map("pay_forms")
}

enum CashierStatus {
  opened
  closed
}

model Cashier {
  id              String            @id @default(uuid())
  company_id      String
  company         Company           @relation(fields: [company_id], references: [id])
  employee_id     String
  employee        Employee          @relation(fields: [employee_id], references: [id])
  open_value      Decimal           @db.Decimal(10, 2)
  open_date       DateTime
  close_value     Decimal           @db.Decimal(10, 2)
  close_date      DateTime
  status          CashierStatus
  created_at      DateTime          @default(now())
  CashierMoviment CashierMoviment[]

  @@map("cashiers")
}

enum CashierMovimentType {
  deposit
  withdraw
}

model CashierMoviment {
  id            String              @id @default(uuid())
  cashier_id    String
  cashier       Cashier             @relation(fields: [cashier_id], references: [id])
  moviment_type CashierMovimentType
  description   String
  value         Decimal             @db.Decimal(10, 2)
  created_at    DateTime            @default(now())

  @@map("cashier_moviments")
}
